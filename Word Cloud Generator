HTML_page_header = '''
<!DOCTYPE html>
<html>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="d3.layout.cloud.js"></script>
<head>
    <title>Word Cloud</title>
</head>
<style>
    body {
        font-family:"Lucida Grande","Droid Sans",Arial,Helvetica,sans-serif;
    }
    .legend {
        border: 1px solid #555555;
        border-radius: 5px 5px 5px 5px;
        font-size: 0.8em;
        margin: 10px;
        padding: 8px;
    }
    .bld {
        font-weight: bold;
    }
</style>
<body>

</body>
<script>

    var frequency_list = [
'''

HTML_page_body ='''
          ];


    var color = d3.scale.linear()
            .domain([0,1,2,3,4,5,6,10,15,20,100])
            .range(["#ddd", "#ccc", "#bbb", "#aaa", "#999", "#888", "#777", "#666", "#555", "#444", "#333", "#222"]);

    d3.layout.cloud().size([850, 300])
            .words(frequency_list)
            .rotate(0)
            .fontSize(function(d) { return d.size; })
            .on("end", draw)
            .start();

    function draw(words) {
        d3.select("body").append("svg")
                .attr("width", 900)
                .attr("height", 350)
                .attr("class", "wordcloud")
                .append("g")
                .attr("transform", "translate(370,200)")
                .selectAll("text")
                .data(words)
                .enter().append("text")
                .style("font-size", function(d) { return d.size + "px"; })
                .style("fill", function(d, i) { return color(i); })
                .attr("transform", function(d) {
                    return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
                })
                .text(function(d) { return d.text; });
    }
</script>

<div style="width: 40%;">
    <div class="legend">
        Commonly used words are larger and slightly lighter. Less common words are smaller and more obscure.
    </div>

</div>


</html>
'''

def read_words(file_name):
    '''
    It read a file with words and frequencies and store the data as a
    pair list:
    [(word1, freq1), (word1, freq2), ...]

    Here, word_i is a string and freq_i is an integer. 
    '''
    lista_palabras = []
    lista_frecuencias = []
    with open ('words.txt','r') as L: #we copy a tweet into a notepad, save this document and call it "words.txt"
        for m in L:
            d = m.split()
            lista_palabras.append(d[0])
            lista_frecuencias.append(int(d[-1]))
        result = list(zip(lista_palabras, lista_frecuencias))
    return result


def get_top_words(words, n):
    '''
    It receives a list of words and frequencies and return the top n
    most frequent words with their respective frequencies.

    '''
    topwords = words[0:n]
    return topwords


def get_top_hashtags(words, n):
    '''
    It receives a list of words and frequencies and returns the top n
    Most frequent hashtags with their respective frequencies.

    '''
    tophash = []
    for i in words:
        if i[0][0] == '#':
            tophash.append(i)
    tophash = tophash[0:n]
    return tophash

def get_top_users(words, n):
    '''
    Receive a list of words and frequencies and return the top n
    most frequent users with their respective frequencies.

    '''
    topusers = []
    for i in words:
        if i[0][0] == '@':
            topusers.append(i)
    topusers = topusers[0:n]
    return topusers


def generate_cloud(words, scale, file_name):
    '''
    Generates an HTML page displaying a word cloud from the word
    list. The output HTML code is written to file_name.
    The file can be opened with the browser.
    '''
    with open(file_name, 'w') as outfile:
        outfile.write(HTML_page_header)
        for w, f in words:
            outfile.write("{text: '" + w + "', size:" + str(f * scale) + "},")
        outfile.write("{text: 'none', size: 0}\n")
        outfile.write(HTML_page_body)


#The words.txt file must be generated by process_tweets.py
#The resulting html files can be opened with a browser.

words = read_words('words.txt')
generate_cloud(get_top_words(words, 100), 0.3, 'word_cloud.html')
generate_cloud(get_top_hashtags(words, 20), 5, 'hashtag_cloud.html')
generate_cloud(get_top_users(words, 30), 3, 'user_cloud.html')
